import fs from "fs";

const FILE_NAME = "tasks.json";

function loadTasks() {
    if (!fs.existsSync(FILE_NAME)) {
        fs.writeFileSync(FILE_NAME, "[]");
        return [];
    }
    const data = fs.readFileSync(FILE_NAME, "utf-8");
    return JSON.parse(data || "[]");
}

function saveTasks(tasks) {
    fs.writeFileSync(FILE_NAME, JSON.stringify(tasks, null, 2));
}

function addTask(description) {
    const tasks = loadTasks();
    const newId = tasks.length ? Math.max(...tasks.map(t => t.taskId)) + 1 : 1;
    const now = new Date().toISOString().slice(0, 16);

    const newTask = {
        taskId: newId,
        description,
        status: Status.TODO,
        createdAt: now,
        updatedAt: now
    };

    tasks.push(newTask);
    saveTasks(tasks);
    console.log(`task added`);
}

function listTasks() {
    const tasks = loadTasks();
    console.log("Tasks:");
    tasks.forEach(task => {
        console.log(`ID: ${task.taskId}, Description: ${task.description}, Status: ${task.status}, Created At: ${task.createdAt}`);
    });
}
function listTasksByStatus(status) {
    const tasks = loadTasks();
    const filteredTasks = tasks.filter(task => task.status === status);
    console.log(`Tasks with status "${status}":`);
    filteredTasks.forEach(task => {
        console.log(`ID: ${task.taskId}, Description: ${task.description}, Status: ${task.status}, Created At: ${task.createdAt}`);
    });
}

function updateTaskStatus(taskId, newStatus) {
    const tasks = loadTasks();
    const taskIndex = tasks.findIndex(task => task.taskId === taskId);
    if (taskIndex === -1) {
        console.log(`Task with ID ${taskId} not found.`);
        return;
    }
    tasks[taskIndex].status = newStatus;
    tasks[taskIndex].updatedAt = new Date().toISOString().slice(0, 16);
    saveTasks(tasks);
    console.log(`Task status updated`);
}
function updateTaskDescription(taskId, newDescription) {
    const tasks = loadTasks();
    const taskIndex = tasks.findIndex(task => task.taskId === taskId);
    if (taskIndex === -1) {
        console.log(`Task with ID not found.`);
        return;
    }
    tasks[taskIndex].description = newDescription;
    tasks[taskIndex].updatedAt = new Date().toISOString().slice(0, 16);
    saveTasks(tasks);
    console.log(`Task description updated`);
}
function deleteTask(taskId) {
    const tasks = loadTasks();
    const newTasks = tasks.filter(task => task.taskId !== taskId);
    if (newTasks.length === tasks.length) {
        console.log(`Task with ID not found.`);
        return;
    }
    saveTasks(newTasks);
    console.log(`Task deleted`);
}

addTask("this task is for testing the adding function");